// RUN: %parser %s 2>&1 | FileCheck %s --check-prefix=CHECK-PARSER

// CHECK-PARSER:        class Foo {
// CHECK-PARSER-NEXT:     function sayName(Variable: [a], )
// CHECK-PARSER-NEXT:     BlockStmt: {
// CHECK-PARSER-NEXT:       Call: [Variable: [print](Access: [ this.name ], )];
// CHECK-PARSER-NEXT:       Call: [Variable: [print](Variable: [a], )];
// CHECK-PARSER-NEXT:     }
// CHECK-PARSER:        var foo1 = Call: [Variable: [Foo]()];
// CHECK-PARSER-NEXT:   Assign: [Access: [ Variable: [foo1].name ] = String: ["foo1"]];
// CHECK-PARSER-NEXT:   var foo2 = Call: [Variable: [Foo]()];
// CHECK-PARSER-NEXT:   Assign: [Access: [ Variable: [foo2].name ] = String: ["foo2"]];
// CHECK-PARSER-NEXT:   Assign: [Access: [ Variable: [foo2].fn ] = Access: [ Variable: [foo1].sayName ]];
// CHECK-PARSER-NEXT:   Call: [Access: [ Variable: [foo2].fn ](Number: [1], )];

class Foo {
  fun sayName(a) {
    print (this.name);
    print (a);
  }
}

var foo1 = Foo();
foo1.name = "foo1";

var foo2 = Foo();
foo2.name = "foo2";

// Store the method reference on another object.
foo2.fn = foo1.sayName;
// Still retains original receiver.
foo2.fn(1);
