// RUN: %parser %s | FileCheck %s --check-prefix=CHECK-PARSER
// RUN: %parser --semantic-analyzer %s | FileCheck %s --check-prefix=CHECK-SEMANTIC

// CHECK-PARSER:         class Foo {
// CHECK-PARSER-NEXT:      function returnSelf()
// CHECK-PARSER-NEXT:      BlockStmt: {
// CHECK-PARSER-NEXT:        return Variable: [Foo];
// CHECK-PARSER-NEXT:      }
// CHECK-PARSER:         Call: [Variable: [print](Call: [Access: [Call: [Variable: [Foo]()].returnSelf]()], )];

// CHECK-SEMANTIC:       class Foo {
// CHECK-SEMANTIC-NEXT:    function returnSelf()
// CHECK-SEMANTIC-NEXT:    BlockStmt: {
// CHECK-SEMANTIC-NEXT:      return Variable: [Foo: class Foo];
// CHECK-SEMANTIC-NEXT:    }
// CHECK-SEMANTIC:      }
// CHECK-SEMANTIC:      Call: [Variable: [print: (string) -> nil](Call: [Access: [Call: [Variable: [Foo: () -> instance of Foo]()].returnSelf: () -> class Foo]()], )];

class Foo {
  fun returnSelf() {
    return Foo;
  }
}

print (Foo().returnSelf()); // expect: Foo
