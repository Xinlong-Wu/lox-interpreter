// RUN: %parser %s | FileCheck %s --check-prefix=CHECK-PARSER
// RUN: %parser --semantic-analyzer %s 2>&1 | FileCheck %s --check-prefix=CHECK-SEMANTIC

// CHECK-PARSER-LABEL:     class Foo {
// CHECK-PARSER-NEXT:         function inFoo()
// CHECK-PARSER-NEXT:         BlockStmt: {
// CHECK-PARSER-NEXT:           Call: [Variable: [print](String: ["in foo"], )];
// CHECK-PARSER-NEXT:         }
// CHECK-PARSER-LABEL:     class Bar < Foo {
// CHECK-PARSER-NEXT:         function inBar()
// CHECK-PARSER-NEXT:         BlockStmt: {
// CHECK-PARSER-NEXT:           Call: [Variable: [print](String: ["in bar"], )];
// CHECK-PARSER-NEXT:         }
// CHECK-PARSER-LABEL:     class Baz < Bar {
// CHECK-PARSER-NEXT:         function inBaz()
// CHECK-PARSER-NEXT:         BlockStmt: {
// CHECK-PARSER-NEXT:           Call: [Variable: [print](String: ["in baz"], )];
// CHECK-PARSER-NEXT:         }
// CHECK-PARSER:           var baz = Call: [Variable: [Baz]()];
// CHECK-PARSER-NEXT:      Call: [Access: [Variable: [baz].inFoo]()];
// CHECK-PARSER-NEXT:      Call: [Access: [Variable: [baz].inBar]()];
// CHECK-PARSER-NEXT:      Call: [Access: [Variable: [baz].inBaz]()];

// CHECK-SEMANTIC-LABEL:   var baz: instance of Baz = Call: [Variable: [Baz: () -> instance of Baz]()];
// CHECK-SEMANTIC-NEXT:    Call: [Access: [Variable: [baz: instance of Baz].inFoo: () -> nil]()];
// CHECK-SEMANTIC-NEXT:    Call: [Access: [Variable: [baz: instance of Baz].inBar: () -> nil]()];
// CHECK-SEMANTIC-NEXT:    Call: [Access: [Variable: [baz: instance of Baz].inBaz: () -> nil]()];

class Foo {
  fun inFoo() {
    print ("in foo");
  }
}

class Bar < Foo {
  fun inBar() {
    print ("in bar");
  }
}

class Baz < Bar {
  fun inBaz() {
    print ("in baz");
  }
}

var baz = Baz();

baz.inFoo(); // expect: in foo
baz.inBar(); // expect: in bar
baz.inBaz(); // expect: in baz
