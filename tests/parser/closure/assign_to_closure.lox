// RUN: %parser %s | FileCheck %s --check-prefix=CHECK-PARSER
// RUN: %parser --semantic-analyzer %s | FileCheck %s --check-prefix=CHECK-SEMANTIC


// CHECK-PARSER:           var f;
// CHECK-PARSER-NEXT:      var g;
// CHECK-PARSER-NEXT:      BlockStmt: {
// CHECK-PARSER-NEXT:        var local = String: ["local"];
// CHECK-PARSER-NEXT:        function f_()
// CHECK-PARSER-NEXT:        BlockStmt: {
// CHECK-PARSER-NEXT:          Call: [Variable: [print](Variable: [local], )];
// CHECK-PARSER-NEXT:          Assign: [Variable: [local] = String: ["after f"]];
// CHECK-PARSER-NEXT:          Call: [Variable: [print](Variable: [local], )];
// CHECK-PARSER-NEXT:        }

// CHECK-PARSER:             Assign: [Variable: [f] = Variable: [f_]];
// CHECK-PARSER-NEXT:        function g_()
// CHECK-PARSER-NEXT:        BlockStmt: {
// CHECK-PARSER-NEXT:          Call: [Variable: [print](Variable: [local], )];
// CHECK-PARSER-NEXT:          Assign: [Variable: [local] = String: ["after g"]];
// CHECK-PARSER-NEXT:          Call: [Variable: [print](Variable: [local], )];
// CHECK-PARSER-NEXT:        }

// CHECK-PARSER:             Assign: [Variable: [g] = Variable: [g_]];
// CHECK-PARSER-NEXT:      }

// CHECK-PARSER:           Call: [Variable: [f]()];
// CHECK-PARSER-NEXT:      Call: [Variable: [g]()];


// CHECK-SEMANTIC:			var f: Function f_ with 1 overloads;
// CHECK-SEMANTIC:			var g: Function g_ with 1 overloads;
// CHECK-SEMANTIC:			BlockStmt: {
// CHECK-SEMANTIC-NEXT:			var local: string = String: ["local"];
// CHECK-SEMANTIC-NEXT:    		function f_()
// CHECK-SEMANTIC-NEXT:			BlockStmt: {
// CHECK-SEMANTIC-NEXT:				Call: [Variable: [print: (string) -> nil](Variable: [local: string], )];
// CHECK-SEMANTIC-NEXT:				Assign: [Variable: [local: string] = String: ["after f"]];
// CHECK-SEMANTIC-NEXT:				Call: [Variable: [print: (string) -> nil](Variable: [local: string], )];
// CHECK-SEMANTIC-NEXT:			}
// CHECK-SEMANTIC:				Assign: [Variable: [f: Function f_ with 1 overloads] = Variable: [f_: Function f_ with 1 overloads]];
// CHECK-SEMANTIC-NEXT:			function g_()
// CHECK-SEMANTIC-NEXT:			BlockStmt: {
// CHECK-SEMANTIC-NEXT:				Call: [Variable: [print: (string) -> nil](Variable: [local: string], )];
// CHECK-SEMANTIC-NEXT:				Assign: [Variable: [local: string] = String: ["after g"]];
// CHECK-SEMANTIC-NEXT:				Call: [Variable: [print: (string) -> nil](Variable: [local: string], )];
// CHECK-SEMANTIC-NEXT:			}
// CHECK-SEMANTIC:				Assign: [Variable: [g: Function g_ with 1 overloads] = Variable: [g_: Function g_ with 1 overloads]];
// CHECK-SEMANTIC-NEXT:		}
// CHECK-SEMANTIC:			Call: [Variable: [f: ()]()];
// CHECK-SEMANTIC-NEXT:		Call: [Variable: [g: ()]()];


var f;
var g;

{
  var local = "local";
  fun f_() {
    print (local);
    local = "after f";
    print (local);
  }
  f = f_;

  fun g_() {
    print (local);
    local = "after g";
    print (local);
  }
  g = g_;
}

f();

g();
