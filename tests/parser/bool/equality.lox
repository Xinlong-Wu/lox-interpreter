// RUN: %parser %s 2>&1 | FileCheck %s --check-prefix=CHECK-PARSER
// RUN: not %parser --semantic-analyzer %s 2>&1 | FileCheck %s --check-prefix=CHECK-SEMANTIC

// CHECK-PARSER-LABEL:     Call: [Variable: [print](Binary: [Literal: [true] == Literal: [true]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] == Literal: [false]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] == Literal: [true]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] == Literal: [false]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] == Number: [1]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] == Number: [0]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] == String: ["true"]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] == String: ["false"]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] == String: [""]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] != Literal: [true]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] != Literal: [false]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] != Literal: [true]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] != Literal: [false]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] != Number: [1]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] != Number: [0]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [true] != String: ["true"]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] != String: ["false"]], )];
// CHECK-PARSER-NEXT:      Call: [Variable: [print](Binary: [Literal: [false] != String: [""]], )];

// CHECK-SEMANTIC-LABEL:   Incompatible types in binary expression at
// CHECK-SEMANTIC-NEXT:    Binary: [Literal: [true] == Number: [1]]
// CHECK-SEMANTIC-NEXT:    No matching overload for function 'print(unknown(unresolved)) -> nil' at
// CHECK-SEMANTIC-LABEL:   Incompatible types in binary expression at
// CHECK-SEMANTIC-NEXT:    Binary: [Literal: [false] == Number: [0]]
// CHECK-SEMANTIC-NEXT:    No matching overload for function 'print(unknown(unresolved)) -> nil' at
// CHECK-SEMANTIC-LABEL:   Incompatible types in binary expression at
// CHECK-SEMANTIC-NEXT:    Binary: [Literal: [true] == String: ["true"]]
// CHECK-SEMANTIC-NEXT:    No matching overload for function 'print(unknown(unresolved)) -> nil' at
// CHECK-SEMANTIC-LABEL:   Incompatible types in binary expression at
// CHECK-SEMANTIC-NEXT:    Binary: [Literal: [false] == String: ["false"]]
// CHECK-SEMANTIC-NEXT:    No matching overload for function 'print(unknown(unresolved)) -> nil' at
// CHECK-SEMANTIC-LABEL:   Incompatible types in binary expression at
// CHECK-SEMANTIC-NEXT:    Binary: [Literal: [false] == String: [""]]
// CHECK-SEMANTIC-NEXT:    No matching overload for function 'print(unknown(unresolved)) -> nil' at

// CHECK-SEMANTIC-LABEL:   Call: [Variable: [print: (bool) -> nil](Binary: [Literal: [true] == Literal: [true]], )];
// CHECK-SEMANTIC-NEXT:    Call: [Variable: [print: (bool) -> nil](Binary: [Literal: [true] == Literal: [false]], )];
// CHECK-SEMANTIC-NEXT:    Call: [Variable: [print: (bool) -> nil](Binary: [Literal: [false] == Literal: [true]], )];
// CHECK-SEMANTIC-NEXT:    Call: [Variable: [print: (bool) -> nil](Binary: [Literal: [false] == Literal: [false]], )];

print (true == true);    // expect: true
print (true == false);   // expect: false
print (false == true);   // expect: false
print (false == false);  // expect: true

// Not equal to other types.
print (true == 1);        // expect: false
print (false == 0);       // expect: false
print (true == "true");   // expect: false
print (false == "false"); // expect: false
print (false == "");      // expect: false

print (true != true);    // expect: false
print (true != false);   // expect: true
print (false != true);   // expect: true
print (false != false);  // expect: false

// Not equal to other types.
print (true != 1);        // expect: true
print (false != 0);       // expect: true
print (true != "true");   // expect: true
print (false != "false"); // expect: true
print (false != "");      // expect: true
